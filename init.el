;; Keep track of loading time
(defconst emacs-start-time (current-time))

(package-initialize)

;; load system-specific settings best loaded first
(let ((pre "~/personal/exclusive/pre.el"))
  (if (file-exists-p pre)
      (load pre)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;; PRE-LOAD APPEARANCE SETTINGS ;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; These are here, and not in config.org, because they should be present
; during the loading and saving of config.el (generated by babel).
; If any code in config.org fails, the basic appearance of emacs will
; be preserved. I got tired of seeing ugly emacs on failure.

;; Load wilson theme:
(load "~/.emacs.d/wilson-theme.el")

;; Setup default window size:
(add-to-list 'default-frame-alist '(height . 40))
(add-to-list 'default-frame-alist '(width . 160))

;; Get rid of annoying stuff:
(setq gc-cons-threshold 100000000)
(setq inhibit-startup-message t)

;; Use 'y' instead of "yes" and 'n' instead of "no" at prompt.
(defalias 'yes-or-no-p 'y-or-n-p)

;; Save point position between sessions:
(require 'saveplace)
(setq-default save-place t)
(setq save-place-file (expand-file-name ".places" user-emacs-directory))

;; No splash screen:
(setq inhibit-startup-screen t)

;; Set font:
;(add-to-list 'default-frame-alist
;         '(font .  "Ubuntu Mono-12"))
;(set-face-attribute 'default t :font  "Ubuntu Mono-12")


; disables tool bar
(tool-bar-mode -1)
; disables pmenu bar, can re-enable as a popub with 'C-mouse-3'
(menu-bar-mode -99)
; no scroll bar please
(toggle-scroll-bar -1)

;; Dont truncate lines:
(toggle-truncate-lines)
(global-set-key (kbd "C-c ; t") 'toggle-truncate-lines)

;; I prefer a non-blinking cursor:
(blink-cursor-mode 0)

;; Highlight current line:
(global-hl-line-mode 1)
(set-face-background 'hl-line "#3b3b3b")
(set-face-foreground 'highlight nil)

;; Set up mode line:
;; display time in mode line
(display-time-mode t)

;; Dont ask me if I want to use these features before I do:
(put 'narrow-to-region 'disabled nil)
(put 'scroll-left 'disabled nil)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;; SET UP PACKAGE MANAGEMENT AND USE-PACKAGE ;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(package-initialize)

;; Load Emacs' package manager
(require 'package)

;; Add various emacs package repositories to the pool. This is where we
;; look for packages.
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives
             '("tromey" . "http://tromey.com/elpa/") t)
(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/") t)
(add-to-list 'package-archives
             '("elpy" . "https://jorgenschaefer.github.io/packages/"))

;; Load all of the repositories that we've added.
(when (not package-archive-contents)
  (package-refresh-contents))

;;
;; USE-PACKAGE
;;
;; use-package is a core package in modern emacs. At least if you have
;; A lark config that you want to be managable as a plug-and-play release.
;; It's at least awesome. The following installs it if not already installed,
;; so it can be used to install most recent org-mode, which will handle the
;; rest of the config.
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

;; Configure use-package
(setq use-package-verbose t)
(require 'use-package)
(use-package auto-compile
  :ensure t
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
(setq use-package-always-ensure t)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;; LOAD CONFIG.ORG AND SAVE ITS ELISP TO CONFIG.EL ;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; This use-package call will  ensure that the correct, up-to-date version of
;; org installed, along with all its subpackages (that's the "contrib" bit).
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(use-package org
  :mode (("\\.org$" . org-mode))
  :ensure org-plus-contrib)

;; Make a .el file out of the code in config.org, then run it.
;; This bit of code is responsible for the loading other 2k+ lines of
;; code for this config.
(org-babel-load-file
 (expand-file-name "config.org"
                   user-emacs-directory))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;; WRAP UP ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Load system-specific settings best loaded last
(let ((post "~/personal/exclusive/post.el"))
  (if (file-exists-p post)
      (load post)))
